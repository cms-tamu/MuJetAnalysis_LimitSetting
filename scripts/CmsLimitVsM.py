import math
from math import *

def fCmsLimitVsM(m):
  #M = 0.315
  #LimitMin = 3.08
  #LimitMax = 8.55
  #if False:
  #  print "M = ", M
  #  print "LimitMin = ", LimitMin
  #  print "LimitMax = ", LimitMax
  #  print "sigma = ", fCmsResolution(M)
  #  print "myGaus(M, M, fCmsResolution(M) ) = ", myGaus(M, M, fCmsResolution(M) )
  #  print "LimitMax-LimitMin/myGaus[M,M,sigma(M)]/sigma(M)sqrt(2pi) = ", (LimitMax - LimitMin)/myGaus(M, M, fCmsResolution(M) )/fCmsResolution(M)/sqrt(2.0*pi)
  #  print "1/2/sigma(M)^2 = ", 1.0/2.0/fCmsResolution(M)/fCmsResolution(M)
  #  print "Err: " + str(LimitMin + (LimitMax - LimitMin)*myGaus(m, M, fCmsResolution(M) )/myGaus(M, M, fCmsResolution(M) ))
  #return LimitMin + (LimitMax - LimitMin)*myGaus(m, M, fCmsResolution(M) )/myGaus(M, M, fCmsResolution(M) )
#****************************************
#Minimizer is Linear
#Chi2                      =     0.262144
#NDf                       =           42
#p0                        =      2.93472   +/-   0.0120479  
# FINAL old method
#  return 3.175 + \
#0.231692*exp(-0.5*((m-0.556259)/0.0997077)**2) + \
#2.2771*exp(-0.5*((m-0.916552)/0.032)**2) + \
#1*exp(-0.5*((m-1.16447)/0.02)**2) + \
#2.257*exp(-0.5*((m-1.41355)/0.035)**2) + \
#6.62072*exp(-0.5*((m-1.90464)/0.0777818)**2) + \
#1.93231*exp(-0.5*((m-2.39079)/0.0469897)**2) + \
#0.685263*exp(-0.5*((m-2.74387)/0.04)**2) + \
#13.0045*exp(-0.5*((m-3.10271)/0.0942601)**2)
# FINAL old method re-normalized
  return 3.175 + \
0.231692*exp(-0.5*((m-0.556259)/0.0997077)**2) + \
2.28*exp(-0.5*((m-0.916552)/0.032)**2) + \
2.1*exp(-0.5*((m-1.16447)/0.02)**2) + \
2.25*exp(-0.5*((m-1.41355)/0.035)**2) + \
3.0*exp(-0.5*((m-1.90464)/0.0777818)**2) + \
1.8*exp(-0.5*((m-2.39079)/0.0469897)**2) + \
0.685263*exp(-0.5*((m-2.74387)/0.04)**2) + \
4.7*exp(-0.5*((m-3.10271)/0.0942601)**2)
# FINAL new method
#  return 2.8 + \
#1.0*exp(-0.5*((m-0.545944)/0.0560963)**2) + \
#1.3*exp(-0.5*((m-0.958242)/0.0574384)**2) + \
#1.3*exp(-0.5*((m-1.16451)/0.02)**2) + \
#1.9*exp(-0.5*((m-1.42355)/0.0777347)**2) + \
#3.4*exp(-0.5*((m-1.89319)/0.0729423)**2) + \
#1.9*exp(-0.5*((m-2.37581)/0.0602969)**2) + \
#1.7*exp(-0.5*((m-2.77488)/0.0494984)**2) + \
#4.7*exp(-0.5*((m-3.10282)/0.102522)**2)
#
#  return 2.8 + \
#	1.0*exp(-0.5*((m-5.45942e-01)/5.60983e-02)**2) + \
#	1.3*exp(-0.5*((m-9.58244e-01)/5.74378e-02)**2) + \
#	2.0*exp(-0.5*((m-1.16451)/2.20000e-02)**2) + \
#	2.0*exp(-0.5*((m-1.42355)/7.77350e-02)**2) + \
#	3.6*exp(-0.5*((m-1.89319)/7.29412e-02)**2) + \
#	1.9*exp(-0.5*((m-2.37581)/6.02945e-02)**2) + \
#	1.7*exp(-0.5*((m-2.77488)/4.95005e-02)**2) + \
#	4.7*exp(-0.5*((m-3.10282)/1.02522e-01)**2)

def fCmsLimitVsM_explicit(m):
  A = 3.082
  B = 1.18
  C = 552.0
  M = 0.315
  return A + B*exp( -552*(m - M)*(m - M) )

def myGaus(x, mu, sigma):
  return 1/( sigma * sqrt(2.0*pi) ) * exp( - (x - mu)*(x - mu) / 2.0/sigma/sigma )

def fCmsResolution ( m ):
  return (0.13 + m*0.065)/5.0

def fCmsLimitVsM_HybridNew(m): # return the limit for a given mass. If the mass point is not present, it makes an interpolation.
  if m >= 0.2113 and m <= 8.55:
    m_im1 = 0.2113
    m_i   = 0.2113
    for i in range(len(Limits_HybridNew)):
      m_i   = Limits_HybridNew[i][0]
      lim_i = Limits_HybridNew[i][1]
      if m == m_i:
        return lim_i
      elif m > m_im1 and m < m_i:
        a = (lim_i - lim_im1) / (m_i - m_im1)
        b = (lim_im1*m_i - lim_i*m_im1) / (m_i - m_im1)
        lim = a*m+b
        return lim
      m_im1 = m_i
      lim_im1 = lim_i
  else:
    print "Warning! Mass if outside the range."

# 2015 Granularity
#MGammaD_array = [0.2113,0.2200,0.2300,0.2400,0.2500,0.2600,0.2700,0.2800,0.2900,0.3000,0.3100,0.3200,0.3300,0.3400,0.3500,0.3600,0.3700,0.3800,0.3900,0.4000,0.4100,0.4200,0.4300,0.4400,0.4500,0.4600,0.4700,0.4800,0.4900,0.5000,0.6000,0.7000,0.8000,0.9000,1.0000,1.1000,1.2000,1.5000,2.0000,2.6000,2.7000,2.8000,2.9000,3.0000,3.1000,3.2000,3.3000,3.4000,3.7000,4.0000,5.0000,6.0000,7.0000,8.0000,8.5000]
# 2016 Granularity
MGammaD_array = [0.2113,0.2400,0.2600,0.3000,0.3300,0.3600,0.4000,0.4300,0.4600,0.5000,0.5300,0.5600,0.6000,0.7000,0.8000,0.8800,0.9000,0.9100,0.9200,0.9300,0.9400,1.0000,1.1000,1.2000,1.3000,1.4000,1.5000,1.6000,1.7000,1.8000,1.9000,2.0000,2.1000,2.2000,2.3000,2.4000,2.5000,2.6000,2.7000,2.8000,2.9000,3.0000,3.0200,3.0500,3.0800,3.0900,3.1000,3.1200,3.1500,3.2000,3.3000,3.4000,3.7000,4.0000,5.0000,6.0000,7.0000,8.0000,8.5000]

Limits_HybridNew = [
#OLD COMMAND
[0.2113,3.18711090909],
[0.24,3.17080875],
[0.26,3.191005],
[0.3,3.18464666667],
[0.33,3.17740571429],
[0.36,3.16751769231],
[0.4,3.16378357143],
[0.43,3.15576076923],
[0.46,3.18803833333],
[0.5,3.19889153846],
[0.53,3.30666],
[0.56,3.33786461538],
[0.6,3.2790925],
[0.7,3.21340714286],
[0.8,3.17884230769],
[0.88,3.595456],
[0.9,4.60707818182],
[0.91,4.97041444444],
[0.92,4.98492583333],
[0.93,4.967793],
[0.94,4.96643266667],
[1.0,3.58009545455],
[1.1,3.21361166667],
[1.2,4.96460538462],
[1.3,3.37767571429],
[1.4,4.97221333333],
[1.5,3.48148928571],
[1.6,3.20501705882],
[1.7,3.17656066667],
[1.8,5.240896],
[1.9,5.69242166667],
[2.0,4.91663066667],
[2.1,3.22015352941],
[2.2,3.21622066667],
[2.3,3.79294083333],
[2.4,4.42069538462],
[2.5,3.33645333333],
[2.6,3.241844375],
[2.7,3.64634611111],
[2.8,3.55422071429],
[2.9,3.40847153846],
[3.0,4.29388933333],
[3.02,5.461469],
[3.05,6.71962428571],
[3.08,7.5616125],
[3.09,7.68309785714],
[3.1,7.69994],
[3.12,7.60344666667],
[3.15,6.75310357143],
[3.2,5.18928],
[3.3,3.34327666667],
[3.4,3.198086875],
[3.7,3.22353857143],
[4.0,3.21633769231],
[5.0,3.20173272727],
[6.0,3.1902],
[7.0,3.19382833333],
[8.0,3.21858444444],
[8.5,3.192591875],
# NEW COMMAND
#[0.2113,2.81856235294],
#[0.24,2.81566823529],
#[0.26,2.82365428571],
#[0.3,2.81418384615],
#[0.33,2.81955533333],
#[0.36,2.82122611111],
#[0.4,2.81852333333],
#[0.43,2.81424444444],
#[0.46,2.94057142857],
#[0.5,3.12951117647],
#[0.53,3.5257275],
#[0.56,3.73774066667],
#[0.6,3.56919357143],
#[0.7,2.89429076923],
#[0.8,2.83215461538],
#[0.88,3.99765909091],
#[0.9,4.05799076923],
#[0.91,4.070147],
#[0.92,4.06848625],
#[0.93,4.07959428571],
#[0.94,4.0671375],
#[1.0,3.982102],
#[1.1,3.053819375],
#[1.2,4.10702076923],
#[1.3,3.62756272727],
#[1.4,4.24583923077],
#[1.5,3.80148083333],
#[1.6,3.01001818182],
#[1.7,2.87195583333],
#[1.8,5.36153384615],
#[1.9,5.677206875],
#[2.0,4.25359916667],
#[2.1,2.94262],
#[2.2,2.85667181818],
#[2.3,4.01672714286],
#[2.4,4.05978571429],
#[2.5,3.26026923077],
#[2.6,3.0532],
#[2.7,3.993225],
#[2.8,3.93376384615],
#[2.9,3.400854375],
#[3.0,4.14864714286],
#[3.02,5.33049428571],
#[3.05,6.574294],
#[3.08,7.40944133333],
#[3.09,7.52550222222],
#[3.1,7.548055],
#[3.12,7.38258538462],
#[3.15,6.58318533333],
#[3.2,5.07419181818],
#[3.3,3.22803818182],
#[3.4,2.93016307692],
#[3.7,2.82197666667],
#[4.0,2.82146636364],
#[5.0,2.81569176471],
#[6.0,2.8132125],
#[7.0,2.8204],
#[8.0,2.82356538462],
#[8.5,2.82641785714],
#First time
#[0.2113,2.81306071429],
#[0.24,2.820245],
#[0.26,2.820463],
#[0.3,2.81779285714],
#[0.33,2.82291375],
#[0.36,2.80904],
#[0.4,2.82785777778],
#[0.43,2.82164153846],
#[0.46,2.9524775],
#[0.5,3.12588272727],
#[0.53,3.52600454545],
#[0.56,3.73861181818],
#[0.6,3.56418],
#[0.7,2.90327333333],
#[0.8,2.82875571429],
#[0.88,3.99548642857],
#[0.9,4.06462545455],
#[0.91,4.07220583333],
#[0.92,4.07321428571],
#[0.93,4.0731675],
#[0.94,4.07445],
#[1.0,3.99518],
#[1.1,3.05644875],
#[1.2,4.10662533333],
#[1.3,3.621701],
#[1.4,4.241135],
#[1.5,3.80516545455],
#[1.6,2.99995833333],
#[1.7,2.86616111111],
#[1.8,5.35150384615],
#[1.9,5.68617],
#[2.0,4.24787],
#[2.1,2.941386],
#[2.2,2.85977666667],
#[2.3,4.020795],
#[2.4,4.05932666667],
#[2.5,3.25460222222],
#[2.6,3.054305],
#[2.7,3.99585230769],
#[2.8,3.92714666667],
#[2.9,3.3921175],
#[3.0,4.133965],
#[3.02,5.342161],
#[3.05,6.56383125],
#[3.08,7.40376333333],
#[3.09,7.51519],
#[3.1,7.547794],
#[3.12,7.37887833333],
#[3.15,6.57531],
#[3.2,5.056122],
#[3.3,3.22834666667],
#[3.4,2.92991625],
#[3.7,2.816244],
#[4.0,2.81677071429],
#[5.0,2.81467083333],
#[6.0,2.81401],
#[7.0,2.81587],
#[8.0,2.81585916667],
#[8.5,2.81885125],
]
