import math
from math import *

def fCmsLimitVsM(m):
  #M = 0.315
  #LimitMin = 3.08
  #LimitMax = 8.55
  #if False:
  #  print "M = ", M
  #  print "LimitMin = ", LimitMin
  #  print "LimitMax = ", LimitMax
  #  print "sigma = ", fCmsResolution(M)
  #  print "myGaus(M, M, fCmsResolution(M) ) = ", myGaus(M, M, fCmsResolution(M) )
  #  print "LimitMax-LimitMin/myGaus[M,M,sigma(M)]/sigma(M)sqrt(2pi) = ", (LimitMax - LimitMin)/myGaus(M, M, fCmsResolution(M) )/fCmsResolution(M)/sqrt(2.0*pi)
  #  print "1/2/sigma(M)^2 = ", 1.0/2.0/fCmsResolution(M)/fCmsResolution(M)
  #  print "Err: " + str(LimitMin + (LimitMax - LimitMin)*myGaus(m, M, fCmsResolution(M) )/myGaus(M, M, fCmsResolution(M) ))
  #return LimitMin + (LimitMax - LimitMin)*myGaus(m, M, fCmsResolution(M) )/myGaus(M, M, fCmsResolution(M) )
#****************************************
#Minimizer is Linear
#Chi2                      =     0.262144
#NDf                       =           42
#p0                        =      2.93472   +/-   0.0120479  
  #return 0.35*exp(-0.5*((m-0.55)/0.06)**2)+3.023;
  return 0.23*exp(-0.5*((m-0.45)/0.15)**2) + 0.2*exp(-0.5*((m-0.85)/0.15)**2) + 0.1*exp(-0.5*((m-1.1)/0.5)**2) + 3.05 + 1.5*exp(-0.5*((m-3.1)/0.05)**2)

def fCmsLimitVsM_explicit(m):
  A = 3.082
  B = 1.18
  C = 552.0
  M = 0.315
  return A + B*exp( -552*(m - M)*(m - M) )

def myGaus(x, mu, sigma):
  return 1/( sigma * sqrt(2.0*pi) ) * exp( - (x - mu)*(x - mu) / 2.0/sigma/sigma )

def fCmsResolution ( m ):
  return (0.13 + m*0.065)/5.0

def fCmsLimitVsM_HybridNew(m,version="default"):
  if m >= 0.2113 and m <= 8.55:
    m_im1 = 0.2113
    m_i   = 0.2113
    for i in range(len(Limits_HybridNew)):
      if version == "default":
        m_i   = Limits_HybridNew[i][0]
        lim_i = Limits_HybridNew[i][1]
      elif version == "T5000":
        m_i   = Limits_HybridNew_T5000[i][0]
        lim_i = Limits_HybridNew_T5000[i][1]
      elif version == "T50000":
        m_i   = Limits_HybridNew_T50000[i][0]
        lim_i = Limits_HybridNew_T50000[i][1]
      elif version == "T500000":
        m_i   = Limits_HybridNew_T500000[i][0]
        lim_i = Limits_HybridNew_T500000[i][1]
      if m == m_i:
        return lim_i
      elif m > m_im1 and m < m_i:
        a = (lim_i - lim_im1) / (m_i - m_im1)
        b = (lim_im1*m_i - lim_i*m_im1) / (m_i - m_im1)
        lim = a*m+b
        return lim
      m_im1 = m_i
      lim_im1 = lim_i

MGammaD_array = [0.2113,0.2200,0.2300,0.2400,0.2500,0.2600,0.2700,0.2800,0.2900,0.3000,0.3100,0.3200,0.3300,0.3400,0.3500,0.3600,0.3700,0.3800,0.3900,0.4000,0.4100,0.4200,0.4300,0.4400,0.4500,0.4600,0.4700,0.4800,0.4900,0.5000,0.6000,0.7000,0.8000,0.9000,1.0000,1.1000,1.2000,1.5000,2.0000,2.6000,2.7000,2.8000,2.9000,3.0000,3.1000,3.2000,3.3000,3.4000,3.7000,4.0000,5.0000,6.0000,7.0000,8.0000,8.5000]

Limits_HybridNew = [
[0.2113,3.00493366667],
[0.22,3.099052],
[0.23,3.02846068966],
[0.24,2.96574266667],
[0.25,3.10093666667],
[0.26,3.04057666667],
[0.27,3.08050033333],
[0.28,2.951124],
[0.29,3.035237],
[0.3,3.04365366667],
[0.31,3.12570866667],
[0.32,3.30790142857],
[0.33,3.31683931034],
[0.34,3.25592071429],
[0.35,3.358586],
[0.36,3.29340214286],
[0.37,3.27229344828],
[0.38,3.30337241379],
[0.39,3.28878107143],
[0.4,3.31590655172],
[0.41,3.34692724138],
[0.42,3.27102678571],
[0.43,3.27748296296],
[0.44,3.31255793103],
[0.45,3.33260214286],
[0.46,3.29155964286],
[0.47,3.28368892857],
[0.48,3.31190678571],
[0.49,3.250975],
[0.5,3.29477642857],
[0.6,3.292922],
[0.7,3.22164214286],
[0.8,3.29829],
[0.9,3.30984758621],
[1.0,3.20037076923],
[2.0,3.02449241379],
[2.6,3.03290631579],
[2.7,3.010652],
[2.8,3.074281],
[2.9,3.0930795],
[3.0,3.62056206897],
[3.1,4.251995],
[3.2,3.3009915],
[3.3,3.1343105],
[3.4,3.087566],
[3.7,3.035126],
[4.0,3.06991766667],
[5.0,3.03084166667],
[6.0,3.02816166667],
[7.0,3.04272],
[8.0,3.00994166667],
[8.5,3.06421966667],
]

Limits_HybridNew_T5000 = [
[0.2113,3.00493366667],
[0.22,3.099052],
[0.23,3.02846068966],
[0.24,2.96574266667],
[0.25,3.10093666667],
[0.26,3.04057666667],
[0.27,3.08050033333],
[0.28,2.951124],
[0.29,3.035237],
[0.3,3.04365366667],
[0.31,3.12570866667],
[0.32,3.30790142857],
[0.33,3.31683931034],
[0.34,3.25592071429],
[0.35,3.358586],
[0.36,3.29340214286],
[0.37,3.27229344828],
[0.38,3.30337241379],
[0.39,3.28878107143],
[0.4,3.31590655172],
[0.41,3.34692724138],
[0.42,3.27102678571],
[0.43,3.27748296296],
[0.44,3.31255793103],
[0.45,3.33260214286],
[0.46,3.29155964286],
[0.47,3.28368892857],
[0.48,3.31190678571],
[0.49,3.250975],
[0.5,3.29477642857],
[0.6,3.292922],
[0.7,3.22164214286],
[0.8,3.29829],
[0.9,3.30984758621],
[1.0,3.20037076923],
[2.0,3.02449241379],
[2.6,3.03290631579],
[2.7,3.010652],
[2.8,3.074281],
[2.9,3.0930795],
[3.0,3.62056206897],
[3.1,4.251995],
[3.2,3.3009915],
[3.3,3.1343105],
[3.4,3.087566],
[3.7,3.035126],
[4.0,3.06991766667],
[5.0,3.03084166667],
[6.0,3.02816166667],
[7.0,3.04272],
[8.0,3.00994166667],
[8.5,3.06421966667],
]

Limits_HybridNew_T50000=[
[0.2113,3.00493366667],
[0.22,3.099052],
[0.23,3.02846068966],
[0.24,2.96574266667],
[0.25,3.10093666667],
[0.26,3.04057666667],
[0.27,3.08050033333],
[0.28,2.951124],
[0.29,3.035237],
[0.3,3.04365366667],
[0.31,3.12570866667],
[0.32,3.30430346154],
[0.33,3.321612],
[0.34,3.25781666667],
[0.35,3.3637775],
[0.36,3.28983814815],
[0.37,3.27229344828],
[0.38,3.30337241379],
[0.39,3.28404740741],
[0.4,3.32011714286],
[0.41,3.34479925926],
[0.42,3.2825676],
[0.43,3.27130346154],
[0.44,3.31255793103],
[0.45,3.32695884615],
[0.46,3.29155964286],
[0.47,3.2770808],
[0.48,3.31099192308],
[0.49,3.250975],
[0.5,3.29339307692],
[0.6,3.30486137931],
[0.7,3.23229740741],
[0.8,3.31718037037],
[0.9,3.3081948],
[1.0,3.19738791667],
[2.0,3.02449241379],
[2.6,3.02016058824],
[2.7,3.01678875],
[2.8,3.06367666667],
[2.9,3.107654375],
[3.0,3.62056206897],
[3.1,4.24637777778],
[3.2,3.288044],
[3.3,3.139883125],
[3.4,3.097945],
[4.0,3.06991766667],
[5.0,3.03084166667],
[6.0,3.02816166667],
[7.0,3.04272],
[8.0,3.00994166667],
[8.5,3.06421966667],
]

Limits_HybridNew_T500000=[
]

Limits_HybridNew_T500000_notail=[
]
